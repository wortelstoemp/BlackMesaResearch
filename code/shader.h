// Author(s): Simon

struct ShaderProgram
{
	//TODO(Simon): Do we even need to store the shader IDs?
	uint shaderProgram;
	uint vertexShader;
	uint tesselationControlShader;
	uint tesselationEvaluationShader;
	uint geometryShader;
	uint fragmentShader;
};


//NOTE(Simon): According to the spec it's illegal to pass a shaderID that's not been generated by OpenGL
//NOTE(cont.): to a shaderProgram. So we want to it here, instead of in CreateShader. in CreateShader we would
//NOTE(cont.): have to check if the shader is actually filled *again*
int CompileAndAttachShader(int programID, char** source, GLenum shaderType)
{
	if (*source == 0)
	{
		return 0;
	}
	
	int size = strlen(*source);
	int shaderId = glCreateShader(shaderType);
	glShaderSource(shaderId, 1, source, &size);
	glCompileShader(shaderId);

	int compiled;
	glGetShaderiv(shaderId, GL_COMPILE_STATUS, &compiled);
	if (compiled != GL_TRUE)
	{
		GLsizei log_length = 0;
		GLchar message[1024];
		glGetShaderInfoLog(shaderId, 1024, &log_length, message);
		OutputDebugString(message);
	}

	glAttachShader(programID, shaderId);

	return shaderId;
}

void CreateShader(ShaderProgram* program,
	char* vertexShaderSource,
	char* tessControlSource,
	char* tessEvalSource,
	char* geometrySource,
	char* fragSource)
{
	program->shaderProgram = glCreateProgram();

	program->vertexShader = CompileAndAttachShader(program->shaderProgram, &vertexShaderSource, GL_VERTEX_SHADER);
	program->tesselationControlShader = CompileAndAttachShader(program->shaderProgram, &tessControlSource, GL_TESS_CONTROL_SHADER);
	program->tesselationEvaluationShader = CompileAndAttachShader(program->shaderProgram, &tessEvalSource, GL_TESS_EVALUATION_SHADER);
	program->geometryShader = CompileAndAttachShader(program->shaderProgram, &geometrySource, GL_GEOMETRY_SHADER);
	program->fragmentShader = CompileAndAttachShader(program->shaderProgram, &fragSource, GL_FRAGMENT_SHADER);


	glLinkProgram(program->shaderProgram);

	int linked;
	glGetProgramiv(program->shaderProgram, GL_LINK_STATUS, &linked);
	if (linked != GL_TRUE)
	{
		GLsizei log_length = 0;
		GLchar message[1024];
		glGetProgramInfoLog(program->shaderProgram, 1024, &log_length, message);
		OutputDebugString(message);
	}
}
